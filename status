srcs/builtins/bg.c:	argc = ft_tablen(process->av);
srcs/builtins/bg.c:	if (process->av[1] && process->av[1][0] == '%')
srcs/builtins/bg.c:		job = get_job_by_id(shell->launched_jobs, ft_atoi(process->av[1] + 1));
srcs/builtins/bg.c:	else if (process->av[1])
srcs/builtins/bg.c:		job = get_job_by_name(shell->launched_jobs, process->av[1]);
srcs/builtins/bg.c:		dprintf(STDERR_FILENO, "42sh: bg: %s: no such job\n", (process->av[1]) ? process->av[1] : "current");
srcs/builtins/cd.c:	argc = ft_tablen(process->av);
srcs/builtins/cd.c:	if (argc == 1 || ft_strcmp(process->av[1], "--") == 0)
srcs/builtins/cd.c:	if (ft_strcmp(process->av[1], "-") == 0)
srcs/builtins/cd.c:	return (change_dir(shell, process->av[1]));
srcs/builtins/echo.c:	argc = ft_tablen(process->av);
srcs/builtins/echo.c:		ft_putstr(process->av[i]);
srcs/builtins/exit.c:	argc = ft_tablen(process->av);
srcs/builtins/exit.c:	if (ft_atol(process->av[1], &exit_value) != SUCCESS)
srcs/builtins/exit.c:				, process->av[1]);
srcs/builtins/export.c:	argc = ft_tablen(process->av);
srcs/builtins/export.c:	i = (argc > 1 && process->av[1][0] != '-') ? 1 : 2;
srcs/builtins/export.c:	if ((ret = parse_export(argc, process->av)) != SUCCESS)
srcs/builtins/export.c:		if (export(shell, process->av[i], &ret) != SUCCESS)
srcs/builtins/fg.c:	argc = ft_tablen(process->av);
srcs/builtins/fg.c:	if (process->av[1] && process->av[1][0] == '%')
srcs/builtins/fg.c:		job = get_job_by_id(shell->launched_jobs, ft_atoi(process->av[1] + 1));
srcs/builtins/fg.c:	else if (process->av[1])
srcs/builtins/fg.c:		job = get_job_by_name(shell->launched_jobs, process->av[1]);
srcs/builtins/fg.c:		dprintf(STDERR_FILENO, "42sh: fg: %s: no such job\n", (process->av[1]) ? process->av[1] : "current");
srcs/builtins/jobs.c:		printf("%i\n", process->status);
srcs/builtins/jobs.c:			printf("[%d]%c %d %24s %s\n", job->jobc_id, job->jobc_last, process->pid, signal_msg(process->status),"process->cmd");
srcs/builtins/jobs.c:			printf("     %d %24s%s\n", process->pid, signal_msg(process->status), "process->command");
srcs/builtins/jobs.c:	argc = ft_tablen(process->av);
srcs/builtins/jobs.c:	if ((opt = get_options(argc, process->av, "lp")) & OPT_ERROR)
srcs/builtins/set.c:	i = (process->av[1][0] != '-') ? 1 : 2;
srcs/builtins/set.c:		if (new_positional_var(shell, process->av[i], i) != SUCCESS)
srcs/builtins/set.c:	argc = ft_tablen(process->av);
srcs/builtins/set.c:	if ((parsing_ret = parse_set(argc, process->av)) > 0)
srcs/builtins/type.c:	while (process->av[i])
srcs/builtins/type.c:		ret = type(shell, process->av[i]);
srcs/builtins/unset.c:	argc = ft_tablen(process->av);
srcs/builtins/unset.c:	i = (argc > 1 && process->av[1][0] != '-') ? 1 : 2;
srcs/builtins/unset.c:	if ((parsing_ret = parse_unset(argc, process->av) > 0))
srcs/builtins/unset.c:		if (check_invalid_identifiers(process->av[i], "") != SUCCESS)
srcs/builtins/unset.c:			dprintf(STDERR_FILENO, "42sh: export: `%s': not a valid identifier\n", process->av[i]);
srcs/builtins/unset.c:			del_db(shell, process->av[i]);
srcs/exec/call_bin.c:	exec_redirs(shell, process->redir_list);
srcs/exec/call_bin.c:	if (process->bin == NULL)
srcs/exec/call_bin.c:		if (process->av != NULL)
srcs/exec/call_bin.c:			dprintf(STDERR_FILENO, "42sh: %s: command not found\n", process->av[0]);
srcs/exec/call_bin.c:	if ((ret = check_filepath(process->bin)) != SUCCESS)
srcs/exec/call_bin.c:		ft_perror(process->av[0], NULL, ret);
srcs/exec/call_bin.c:	ret = execve(process->bin, process->av, envp);
srcs/exec/call_builtin.c:	exec_redirs(shell, process->redir_list);
srcs/exec/call_builtin.c:	close_fds(process->redir_list);
srcs/exec/dispatcher.c:	if (process->type == P_PIPE) /* Setup pipes */
srcs/exec/dispatcher.c:		ptr = ((t_process*)process->content);
srcs/exec/dispatcher.c:		process = process->next;
srcs/exec/exec_process.c:	process->pgid = job->pgid;
srcs/exec/exec_process.c:	if ((process->pid = fork()) == 0)/* CHILD PROCESS */
srcs/exec/exec_process.c:	else if (process->pid < 0) /* FORK ERROR */
srcs/exec/exec_process.c:		if (process->pgid == -1)
srcs/exec/exec_process.c:			job->pgid = process->pid;
srcs/exec/exec_process.c:		process->pgid = job->pgid;
srcs/exec/exec_process.c:		if (setpgid(process->pid, process->pgid) != SUCCESS)
srcs/exec/exec_process.c:		if (process->stopped != TRUE
srcs/exec/exec_process.c:		&& tcsetpgrp(shell->terminal, process->pgid) != SUCCESS)
srcs/exec/exec_process.c:		if (infile == STDIN_FILENO && outfile == STDOUT_FILENO && process->stopped != TRUE)
srcs/exec/get_bin.c:		if ((process->bin = ft_strjoin(path, process->av[0])) == NULL)
srcs/exec/get_bin.c:	if (!(tmp = ft_strjoin("/", process->av[0])))
srcs/exec/get_bin.c:	process->bin = ft_strjoin(path, tmp);
srcs/exec/get_bin.c:	return ((process->bin == NULL) ? FAILURE : SUCCESS);
srcs/exec/get_bin.c:		if (check_filepath(process->bin) == SUCCESS)
srcs/exec/get_bin.c:		ft_strdel(&process->bin);
srcs/exec/get_bin.c:	if ((process->av[0][0] == '.'
srcs/exec/get_bin.c:			&& process->av[0][1] == '/'
srcs/exec/get_bin.c:			&& process->av[0][2] != 0)
srcs/exec/get_bin.c:		|| (process->av[0][0] == '/'
srcs/exec/get_bin.c:			&& process->av[0][1]))
srcs/exec/get_bin.c:		process->bin = ft_strdup(process->av[0]);
srcs/exec/hash_map/add_hash_map.c:	if (process->bin == NULL)
srcs/exec/hash_map/add_hash_map.c:	shell->hash.value = get_hash(process->av[0], shell->hash.size);
srcs/exec/hash_map/add_hash_map.c:		ft_lstnew(fetch_hash_db(&shell->db, process->av[0],
srcs/exec/hash_map/add_hash_map.c:						process->bin), sizeof(t_db)));
srcs/exec/hash_map/locate_hash.c:	//shell->hash.value = get_hash(process->av[0], shell->hash.size);
srcs/exec/hash_map/locate_hash.c:		if (ft_strequ(process->av[0], ((t_db*)(sub_map->content))->key))
srcs/exec/hash_map/locate_hash.c:			process->bin = ft_strdup(((t_db*)(sub_map->content))->value);
srcs/expansions/expansion.c:	ptr = process->assign_list;
srcs/expansions/expansion.c:	if (!process->av)
srcs/expansions/expansion.c:	tablo = ft_tabcopy(tablo, process->av);
srcs/expansions/expansion.c:	ft_tabfree(process->av);
srcs/expansions/expansion.c:	process->av = ft_tabcopy(process->av, tablo);
srcs/jobcontrol/job_utils.c:			if (((t_process*)process->content)->pid == pid)
srcs/jobcontrol/job_utils.c:				return (((t_process*)process->content));
srcs/jobcontrol/job_utils.c:			process = process->next;
srcs/jobcontrol/launch_job.c:	if (process->type == P_PIPE) /* Setup pipes */
srcs/jobcontrol/launch_job.c:		ptr = ((t_process*)process->content);
srcs/jobcontrol/launch_job.c:		process = process->next;
srcs/jobcontrol/launch_process.c:	process->pid = getpid();
srcs/jobcontrol/launch_process.c:	if (process->pgid == -1)
srcs/jobcontrol/launch_process.c:		process->pgid = process->pid;
srcs/jobcontrol/launch_process.c:	if (setpgid(process->pid, process->pgid) != SUCCESS)
srcs/jobcontrol/launch_process.c:	if (process->av && (blt = is_a_blt(process->av[0])) != FAILURE)
srcs/jobcontrol/launch_process.c:		process->status = call_builtin(shell, process, blt);
srcs/jobcontrol/launch_process.c:		process->completed = TRUE;
srcs/jobcontrol/launch_process.c:		shell->status = process->status;
srcs/jobcontrol/launch_process.c:	if (process->av)
srcs/jobcontrol/launch_process.c:			exit(process->status);
srcs/jobcontrol/notifications.c:		if (process && process->pid == pid)
srcs/jobcontrol/notifications.c:			process->status = status;
srcs/jobcontrol/notifications.c:					process->status = WTERMSIG(status);
srcs/jobcontrol/notifications.c:				process->stopped = TRUE;
srcs/jobcontrol/notifications.c:				process->completed = TRUE;
srcs/jobcontrol/wait_job.c:	while (!mark_process_status(shell, jobs, pid, status) && process->completed == FALSE && process->stopped == FALSE)
srcs/lexer_parser_analyzer/analyzer/analyzer_process.c:	if (process->av)
srcs/lexer_parser_analyzer/analyzer/analyzer_process.c:		new->av = process->av;
srcs/lexer_parser_analyzer/analyzer/analyzer_process.c:	if (process->type)
srcs/lexer_parser_analyzer/analyzer/analyzer_process.c:		new->type = process->type;
srcs/lexer_parser_analyzer/analyzer/analyzer_process.c:	if (process->assign_list)
srcs/lexer_parser_analyzer/analyzer/analyzer_process.c:		new->assign_list = process->assign_list;
srcs/lexer_parser_analyzer/analyzer/analyzer_process.c:	if (process->redir_list)
srcs/lexer_parser_analyzer/analyzer/analyzer_process.c:		new->redir_list = process->redir_list;
srcs/lexer_parser_analyzer/analyzer/printanalyze.c:			ft_printprocess((t_process*)process->content);
srcs/lexer_parser_analyzer/analyzer/printanalyze.c:			redir = ((t_process*)process->content)->redir_list;
srcs/lexer_parser_analyzer/analyzer/printanalyze.c:			ft_printassignlist(((t_process*)process->content)->assign_list);
srcs/lexer_parser_analyzer/analyzer/printanalyze.c:			process = process->next;
srcs/signals/sigint.c:	ptr = shell->running_process->next;
srcs/signals/sigint.c:	kill(((t_process*)shell->running_process->content)->pid, signum);
